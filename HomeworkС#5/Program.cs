// Задача 34: Задайте массив заполненный случайными положительными 
// трёхзначными числами. Напишите программу, 
// которая покажет количество чётных чисел в массиве.
// [345, 897, 568, 234] -> 2

// // Функция для создания массива
// int[] RandomMassiv(int dlinna)
// {
//     // создаём массив и задаём случайную длинну
//     int[] mass = new int[dlinna];
//     // создаём цикл for, который заполнят массив случайными числами
//     for (int i = 0; i < dlinna; i++)
//     {
//         // от 100 до 999 
//         mass[i] = new Random().Next(100, 1000);
//     }
//     //   возвращаем результат в виде массива
//     return mass;
// }
// // Функция для вывода массива на экран
// void PokazMassiva(int[] massiv)
// {
//     // сначало показываем на консоле 
//     // открывающую квадратную скобку
//     Console.Write("[ ");
//     // создаём цикл for, который перебирает все элементы массива 
//     for (int i = 0; i < massiv.Length; i++)
//     {
//         // и выводит их на экран
//         Console.Write(massiv[i] + " ");
//     }
//     // потом показываем на консоле 
//     // закрывающую квадратную скобку
//     Console.Write("]");
//     // и пробел для красоты :)
//     Console.WriteLine(" ");
// }
// // Функция для нахождения количество чётных чисел в массиве
// void ColvoChetChisel(int[] mas)
// {
//     // Ссоздаёс переменную которая будет хранить 
//     //количество чётных чисел в массиве
//     int colvo = 0;
//     // создаём цикл for, который перебирает все элементы массива 
//     for (int i = 0; i < mas.Length; i++)
//     {
//         // если текущий элемент массива является счётным 
//         // числом, то увеличиваем переменную colvo на 1 елиницу
//         if (mas[i] % 2 == 0) colvo++;
//     }
//     // Сообщаем пользователю сколько у нас чётных чисел в массиве
//     Console.WriteLine($"количество чётных чисел в массиве = {colvo}");

// }
// // создаём случайное число,
// // которое является случайной длинной массива
// int dlinnaMassiva = new Random().Next(0, 11);
// // Создаём массив и вызываем функцию RandomMassiv
// int[] massiv = RandomMassiv(dlinnaMassiva);
// // Потом вызываем функцию PokazMassiva
// PokazMassiva(massiv);
// // далее вызываем функцию ColvoChetChisel которая
// // покажет количество чётных чисел в массиве
// ColvoChetChisel(massiv);


// Задача 36: Задайте одномерный массив, заполненный случайными числами. 
// Найдите сумму элементов, стоящих на нечётных позициях.
// [3, 7, 23, 12] -> 19
// [-4, -6, 89, 6]-> 0

// // Функция для создания массива
// int[] RandomMassiv(int dlinna)
// {
//     // создаём массив и задаём случайную длинну
//     int[] mass = new int[dlinna];
//     // создаём цикл for, который заполнят массив случайными числами
//     for (int i = 0; i < dlinna; i++)
//     {
//         // от -10 до 100
//         mass[i] = new Random().Next(-10, 101);
//     }
//     //   возвращаем результат в виде массива
//     return mass;
// }
// // Функция для вывода массива на экран
// void PokazMassiva(int[] massiv)
// {
//     // сначало показываем на консоле 
//     // открывающую квадратную скобку
//     Console.Write("[ ");
//     // создаём цикл for, который перебирает все элементы массива 
//     for (int i = 0; i < massiv.Length; i++)
//     {
//         // и выводит их на экран
//         Console.Write(massiv[i] + " ");
//     }
//     // потом показываем на консоле 
//     // закрывающую квадратную скобку
//     Console.Write("]");
//     // и пробел для красоты :)
//     Console.WriteLine(" ");
// }
// // Функция для нахождения сумму элементов, стоящих на нечётных позициях.
// void SumElementNaNechetnPozithia(int[] mas)
// {
//     // создаём переменную summa для нахождения суммы
//     int summa = 0;
//     // создаём цикл for, который перебирает все элементы массива
//     // Примечание! так как 0 не является счётным и несчётным
//     // числом поэтому начинаем перебор массива с индекса 1,
//     // а не 0 как обычно ):  
//     for (int i = 1; i < mas.Length; i++)
//     {
//         // если индекс массиива не чётный
//         // то есть остаток от деления на 2 не ранен нулю
//         if (i % 2 != 0)
//         {
//             // то считываем данный элемент массива и складываем сумму
//             summa += mas[i];
//         }
//     }
//     // Сообщаем пользователю сумму элементов, стоящих на нечётных позициях.
//     Console.WriteLine("Cумму элементов, стоящих на нечётных "
//                    + $"позициях в данном массиве = {summa}");
// }

// // создаём случайное число,
// // которое является случайной длинной массива
// int dlinnaMassiva = new Random().Next(0, 11);
// // Создаём массив и вызываем функцию RandomMassiv
// int[] massiv = RandomMassiv(dlinnaMassiva);
// // Потом вызываем функцию PokazMassiva
// PokazMassiva(massiv);
// // далее вызываем функцию SumElementNaNechetnPozithia которая
// // которая находит сумму элементов, стоящих на нечётных позициях.
// SumElementNaNechetnPozithia(massiv);


// Задача 38: Задайте массив вещественных чисел. 
// Найдите разницу между максимальным и минимальным элементов массива.
// [3 7 22 2 78] -> 76

// Функция для создания массива
int[] RandomMassiv(int dlinna)
{
    // создаём массив и задаём случайную длинну
    int[] mass = new int[dlinna];
    // создаём цикл for, который заполнят массив случайными числами
    for (int i = 0; i < dlinna; i++)
    {
        // от -1000 до 1000  
        mass[i] = new Random().Next(100, 1001);
    }
    //   возвращаем результат в виде массива
    return mass;
}
// Функция для вывода массива на экран
void PokazMassiva(int[] massiv)
{
    // сначало показываем на консоле 
    // открывающую квадратную скобку
    Console.Write("[ ");
    // создаём цикл for, который перебирает все элементы массива 
    for (int i = 0; i < massiv.Length; i++)
    {
        // и выводит их на экран
        Console.Write(massiv[i] + " ");
    }
    // потом показываем на консоле 
    // закрывающую квадратную скобку
    Console.Write("]");
    // и пробел для красоты :)
    Console.WriteLine(" ");
}
// Функция для нахождения максимального элемента в массиве 
int MaksimalElement(int[] mass)
{
    //изначально максимум равен первому элементу массива
    int Max = mass[0];
    // создаём цикл for, который перебирает все элементы массива 
    for (int i = 0; i < mass.Length; i++)
    {
        // если максимум меньше текущего элемента массива,
        // то максимум равен текущему элементу
        if (Max < mass[i]) Max = mass[i];
    }
    // возвращаем найденный максимум
    return Max;
}
// Функция для нахождения минимального элемента в массиве
int MinimalElement(int[] mass)
{
    //изначально минимум равен первому элементу массива
    int Min = mass[0];
    // создаём цикл for, который перебирает все элементы массива 
    for (int i = 0; i < mass.Length; i++)
    {
        // если минимум больше текущего элемента массива,
        // то минимум равен текущему элементу
        if (Min > mass[i]) Min = mass[i];
    }
    // возвращаем найденный минимум
    return Min;
}
// Функция для нахождения разницу между максимальным 
// и минимальным элементов массива.
// создаём случайное число,
// которое является случайной длинной массива
int dlinnaMassiva = new Random().Next(0, 11);
// Создаём массив и вызываем функцию RandomMassiv
int[] massiv = RandomMassiv(dlinnaMassiva);
// Потом вызываем функцию PokazMassiva
PokazMassiva(massiv);
// создаём переменные которые хранят максимальный и минимальный элемент массива
int maksimal = MaksimalElement(massiv);
int minimal = MinimalElement(massiv);
// находим результат в ввиде разницы максимального 
// и минимальног элемента массива в переменной rezultat
int rezultat = maksimal - minimal;
// выводим результат в консоль
Console.WriteLine(rezultat);

